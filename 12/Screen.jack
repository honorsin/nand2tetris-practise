// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean screenColor;
    static Array screenAddress;
    static Array bitArray;
    /** Initializes the Screen. */
    function void init() {
        let screenAddress = 16384;
        let screenColor = true;

        let bitArray = Array.new(17);
        let bitArray[0] = 1;
        let bitArray[1] = 2;
        let bitArray[2] = 4;
        let bitArray[3] = 8;
        let bitArray[4] = 16;
        let bitArray[5] = 32;
        let bitArray[6] = 64;
        let bitArray[7] = 128;
        let bitArray[8] = 256;
        let bitArray[9] = 512;
        let bitArray[10] = 1024;
        let bitArray[11] = 2048;
        let bitArray[12] = 4096;
        let bitArray[13] = 8192;
        let bitArray[14] = 16384;
        let bitArray[15] = 16384 + 16384;
        let bitArray[16] = 0;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;

        while (i < 8192) {
            let screenAddress[i] = false;
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let screenColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        let address = (y * 32) + (x / 16);
        let mask = bitArray[x & 15];

        if (screenColor) {
            let screenAddress[address] = screenAddress[address] | mask;
        } else {
            let screenAddress[address] = screenAddress[address] & ~mask;
        }
        
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {

        var int temp

        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;           
        }

        while (~(y1 > y2)) {
            do Screen.drawPixel(x, y1)
            let y1 = y1+1
        }
        return
    }

    function void draw_short_horizontal_line(int x1, int x2, int y) {
        while( ~(x1 > x2) ) {
            do Screen.drawPixel( x1, y );
            let x1 = x1 + 1;
        }
    
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {

    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int temp;
        
        // Make sure x1 <= x2
        if( x1 > x2 ) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
    
        let dx = x2 - x1;
        let dy = y2 - y1;

        if( dx = 0 ) {
            do Screen.drawVerticalLine( x1, y1, y2 );
        }
        else { if( dy = 0 ) {
            do Screen.drawHorizontalLine( x1, x2, y1 );
        }        
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        
        let y = y1;
        while( ~(y > y2) ) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
